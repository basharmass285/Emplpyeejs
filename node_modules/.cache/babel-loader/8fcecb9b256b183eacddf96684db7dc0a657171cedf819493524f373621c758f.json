{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\batit\\\\OneDrive\\\\Desktop\\\\EmployeeJs\\\\Bashar\\\\app\\\\src\\\\pages\\\\Search.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Card } from \"../components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = () => {\n  _s();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const company = searchParams.get('company');\n  const [employees, setEmployees] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchEmployees = async () => {\n      try {\n        const response = await fetch(`https://randomuser.me/api/?results=10&seed=${company}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch employees');\n        }\n        const data = await response.json();\n        const updatedEmployees = data.results.map((employee, index) => ({\n          company,\n          index,\n          details: employee\n        }));\n        setEmployees(updatedEmployees);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchEmployees();\n    document.title = ` Search Results for ${company} | EmployeeManager`;\n  }, [company]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"bg-red-500 rounded-sm text-white\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl text-center\",\n      children: [\"Search Results for \", company]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"flex flex-wrap gap-5 justify-center\",\n        children: employees.map(e => {\n          var _e$details, _e$details$login;\n          return /*#__PURE__*/_jsxDEV(Card, {\n            employee: e === null || e === void 0 ? void 0 : e.details,\n            company: e === null || e === void 0 ? void 0 : e.company,\n            index: e === null || e === void 0 ? void 0 : e.index\n          }, e === null || e === void 0 ? void 0 : (_e$details = e.details) === null || _e$details === void 0 ? void 0 : (_e$details$login = _e$details.login) === null || _e$details$login === void 0 ? void 0 : _e$details$login.uuid, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(Search, \"MY8SjDCuWHX7mqxeiUmGnMtZPx0=\", false, function () {\n  return [useLocation];\n});\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useEffect","useState","useLocation","Card","jsxDEV","_jsxDEV","Search","_s","location","searchParams","URLSearchParams","search","company","get","employees","setEmployees","error","setError","fetchEmployees","response","fetch","ok","Error","data","json","updatedEmployees","results","map","employee","index","details","message","document","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","e","_e$details","_e$details$login","login","uuid","_c","$RefreshReg$"],"sources":["C:/Users/batit/OneDrive/Desktop/EmployeeJs/Bashar/app/src/pages/Search.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Card } from \"../components/Card\";\n\nconst Search = () => {\n    const location = useLocation();\n    const searchParams = new URLSearchParams(location.search);\n    const company = searchParams.get('company');\n\n    const [employees, setEmployees] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchEmployees = async () => {\n            try {\n              const response = await fetch(`https://randomuser.me/api/?results=10&seed=${company}`);\n              if (!response.ok) {\n                throw new Error('Failed to fetch employees');\n              }\n              const data = await response.json();\n              const updatedEmployees = data.results.map((employee, index) => ({\n                company,\n                index,\n                details: employee\n              }));\n              setEmployees(updatedEmployees);\n            } catch (error) {\n              setError(error.message);\n            }\n          };\n        \n        fetchEmployees();\n\n        document.title = ` Search Results for ${company} | EmployeeManager`;\n    }, [company]);\n\n    if (error) {\n        return <p className='bg-red-500 rounded-sm text-white'>{error}</p>;\n    }\n\n    return (\n        <div>\n            <h1 className='text-2xl text-center'>Search Results for {company}</h1>\n                            <div>\n                    <ul className='flex flex-wrap gap-5 justify-center'>\n                        {employees.map((e) => (\n                                    <Card key={e?.details?.login?.uuid} employee={e?.details} company={e?.company} index={e?.index} />\n                                ))}\n                    </ul>\n                </div>\n        </div>\n    );\n}\n\nexport default Search;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}